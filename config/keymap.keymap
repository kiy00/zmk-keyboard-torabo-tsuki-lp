#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    combos {
        compatible = "zmk,combos";

        bt_clear {
            bindings = <&bt BT_CLR>;
            key-positions = <28 29>;
            layers = <2>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer_0 {
            bindings = <
&none  &none      &none         &none             &none           &none                                          &none    &none  &none      &none     &none                  &none
&none  &kp Q      &kp W         &kp E             &kp R           &kp T                                          &kp Y    &kp U  &kp I      &kp O     &kp P                  &none
&none  &kp A      &kp S         &kp D             &kp F           &kp G      &none        &none                  &kp H    &kp J  &kp K      &kp L     &kp MINUS              &none
&none  &kp Z      &kp X         &kp C             &kp V           &kp B      &lt 1 LANG2  &mt RIGHT_SHIFT LANG1  &kp N    &kp M  &kp COMMA  &kp DOT   &mt RIGHT_SHIFT GRAVE  &none
&none  &kp LCTRL  &kp LEFT_ALT  &kp LEFT_COMMAND  &kp LEFT_SHIFT  &kp SPACE  &lt 2 TAB    &kp BACKSPACE          &kp RET  &none  &none      &kp RGUI  &lt 3 BACKSLASH        &none
            >;
        };

        layer_1 {
            bindings = <
&trans  &trans  &trans  &trans     &trans     &trans                  &trans  &trans     &trans     &trans  &trans  &trans
&trans  &trans  &trans  &trans     &trans     &trans                  &trans  &trans     &trans     &trans  &trans  &trans
&trans  &trans  &trans  &mkp RCLK  &mkp LCLK  &trans  &trans  &trans  &trans  &mkp LCLK  &mkp RCLK  &trans  &trans  &trans
&trans  &trans  &trans  &trans     &trans     &trans  &trans  &trans  &trans  &trans     &trans     &trans  &trans  &trans
&trans  &trans  &trans  &trans     &to 0      &to 2   &to 3   &trans  &trans  &trans     &trans     &trans  &trans  &trans
            >;
        };

        layer_2 {
            bindings = <
&trans  &trans     &trans               &trans               &trans           &trans                                  &trans   &trans            &trans             &trans                &trans                 &trans
&trans  &kp PLUS   &kp LS(KP_NUMBER_7)  &kp LS(KP_NUMBER_8)  &kp KP_NUMBER_9  &kp EXCLAMATION                         &none    &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LESS_THAN         &kp GREATER_THAN       &trans
&trans  &kp MINUS  &kp KP_NUMBER_4      &kp KP_NUMBER_5      &kp KP_NUMBER_6  &kp QUESTION     &trans  &trans         &none    &kp LEFT_BRACE    &kp RIGHT_BRACE    &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans
&trans  &kp ASTRK  &kp KP_NUMBER_1      &kp KP_NUMBER_2      &kp KP_NUMBER_3  &kp TILDE        &to 1   &trans         &none    &none             &kp LEFT_BRACKET   &kp UNDER             &kp BACKSLASH          &trans
&trans  &kp SLASH  &kp EQUAL            &kp KP_NUMBER_0      &none            &none            &none   &kp BACKSPACE  &kp RET  &none             &trans             &trans                &trans                 &trans
            >;
        };

        layer_3 {
            bindings = <
&trans  &trans   &trans   &trans        &trans        &trans                                 &trans         &trans     &trans        &trans     &trans   &trans
&trans  &kp F1   &kp F2   &kp F3        &kp F4        &kp F5                                 &kp LG(X)      &kp LG(C)  &kp LG(V)     &none      &none    &trans
&trans  &kp F6   &kp F7   &kp F8        &kp F9        &kp F10     &trans  &trans             &none          &mkp LCLK  &kp UP_ARROW  &mkp RCLK  &none    &trans
&trans  &kp F11  &kp F12  &out OUT_USB  &out OUT_BLE  &bt BT_NXT  &trans  &kp RIGHT_CONTROL  &kp HOME       &kp LEFT   &kp DOWN      &kp RIGHT  &kp END  &trans
&trans  &trans   &trans   &trans        &kp DELETE    &kp TAB     &trans  &kp LG(Z)          &kp LS(LG(Z))  &trans     &trans        &trans     &trans   &trans
            >;
        };
    };
};
